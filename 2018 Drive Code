package org.usfirst.frc.team4360.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Scheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	final String defaultAuto = "Default";
	final String customAuto = "My Auto";
	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	
	/////Drive motors://///
	private Talon motor0; //Left
	private Talon motor1; //Left
	private Talon motor2; //Right
	private Talon motor3; //Right
	
	/////Actual controller://///
	private XboxCont stick0;
	
	/////Extra Schtuff://///
	private Spark motor4; //intake 1
	private Spark motor5; //intake 2
	private Spark motor6; //arm movement
	private Spark motor7; //arm movement
	
	@Override
	public void robotInit() {
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", customAuto);
		SmartDashboard.putData("Auto choices", chooser);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
	}
	
	

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		switch (autoSelected) {
		case customAuto:
			// Put custom auto code here
			break;
		case defaultAuto:
		default:
			// Put default auto code here
			break;
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		if (stick0.getLeftBump() == true || stick0.getRightBump() == false) {
			motor0.set(stick0.getLeftJoyY()*.5); //Left
			motor1.set(stick0.getLeftJoyY()*.5); //Left
			motor2.set(stick0.getRightJoyY()*.5); //Right
			motor3.set(stick0.getRightJoyY()*.5); //Right
		} else {
			motor0.set(stick0.getLeftJoyY()*1); //Left
			motor1.set(stick0.getLeftJoyY()*1);	//Left
			motor2.set(stick0.getRightJoyY()*1); //Right
			motor3.set(stick0.getRightJoyY()*1); //Right
		}
		
		if (stick0.getRightTrig() > 0 || stick0.getLeftTrig() == 0) {
			
			motor4.set(-1);
			motor5.set(-1);
			
		} else if (stick0.getLeftTrig() > 0 || stick0.getRightTrig() == 0) {
			
			motor4.set(1);
			motor5.set(1);
			
		}
		
		if (stick0.getButtonA() == true || stick0.getButtonB() == false){
			
			motor6.set(.25);
			motor7.set(.25);
			
		} else if (stick0.getButtonA() == false || stick0.getButtonB() == true) {
			
			motor6.set(-.25);
			motor7.set(-.25);
			
		} else {
			
			motor6.set(0);
			motor7.set(0);
			
		}
		
	}

	/**
	 * This function is called periodically during test mode
	 */

	
	@Override
	public void testPeriodic() {
	}
}

