/*
  @author T.J. Schlepp
  @Trainees K.J. [Lastname], R.J. Colton, Tyler Perlenfein
 */
package org.usfirst.frc.team4360.robot;

import edu.wpi.first.wpilibj.IterativeRobot;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Spark;
/*import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Compressor;*/
//import edu.wpi.first.wpilibj.Timer;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc.team4360.robot.commands.ExampleCommand;
import org.usfirst.frc.team4360.robot.subsystems.ExampleSubsystem;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	public static final ExampleSubsystem exampleSubsystem = new ExampleSubsystem();
	public static OI oi;

	Command autonomousCommand;
	SendableChooser<Command> chooser = new SendableChooser<>();
	
	/////Drive motors://///
	private SpeedController motor0;
	private SpeedController motor1;
	private SpeedController motor2;
	private SpeedController motor3;
	
	/////Actual controller://///
	private XboxCont stick0;
	
	/////Extra schtuff://///
	//private Compressor comp1;
	//private DoubleSolenoid dubsol1;
	
	///Climb:
	private SpeedController motor4;
	private SpeedController motor5;
	
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		oi = new OI();
		chooser.addDefault("Default Auto", new ExampleCommand());
		// chooser.addObject("My Auto", new MyAutoCommand());
		SmartDashboard.putData("Auto mode", chooser);
		
		motor0 = new Talon(0);	//Left
		motor1 = new Talon(1);	//Left
		motor2 = new Talon(2);	//Right
		motor3 = new Talon(3);	//Right
		
		stick0 = new XboxCont(0);
		
		//dubsol1 = new DoubleSolenoid(1, 2);
		//comp1 = new Compressor(0);
		
		motor4 = new Spark(4);
		motor5 = new Spark(5);

		/* Idfk where this is supposed to go...
		   It's all the thoughts within the thoughts
			c.setClosedLoopControl(true);
			c.setClosedLoopControl(false);
			
			boolean enabled = c.enabled();
			boolean pressureSwitch = c.getPressureSwitchValue();
			float current = c.getCompressorCurrent();

		*/
		
	}

	/**
	 * This function is called once each time the robot enters Disabled mode.
	 * You can use it to reset any subsystem information you want to clear when
	 * the robot is disabled.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString code to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional commands to the
	 * chooser code above (like the commented example) or additional comparisons
	 * to the switch structure below with additional strings & commands.
	 */
	@Override
	public void autonomousInit() {
		autonomousCommand = chooser.getSelected();

		/* Example command layout:
		 * String autoSelected = SmartDashboard.getString("Auto Selector",
		 * "Default"); switch(autoSelected) { case "My Auto": autonomousCommand
		 * = new MyAutoCommand(); break; case "Default Auto": default:
		 * autonomousCommand = new ExampleCommand(); break; }
		 */

		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
		
		for(int i = 1; i <= 4; i++){
			if (i > 3) {
				motor0.set(0.25);
				motor1.set(0.25);
				motor2.set(-0.25);
				motor3.set(-0.25);
						}
			else if(i == 4){
				motor0.set(0.5);
				motor1.set(0.5);
				motor2.set(0.25);
				motor3.set(0.25);
				}
		
			}
		
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		while (isOperatorControl() && isEnabled()) { //Checking that autonomous isn't currently a thing
			// This will set the motors' output power (i.e.: speed).
			// Give it a number from -1 (100% speed in reverse) to +1 (100% speed going forward)
			
					motor0.set(stick0.getLeftJoyY()*-.5);
					motor1.set(stick0.getLeftJoyY()*-.5);	
					motor2.set(stick0.getRightJoyY()*.5);
					motor3.set(stick0.getRightJoyY()*.5);
					
					//Other stuff:
					
					///Penumatics:///
					/*
					if (stick0.getRightTrig() > 0 && !(stick0.getLeftTrig() > 0)) {
						dubsol1.set(DoubleSolenoid.Value.kForward);
					} else if (stick0.getLeftTrig() > 0 && !(stick0.getRightTrig() > 0)) {
						dubsol1.set(DoubleSolenoid.Value.kReverse);
					} else {
						dubsol1.set(DoubleSolenoid.Value.kOff);
						}
					
					if (comp1.getCompressorCurrent() > 8.16){
						
					}*/
					
					///Climbing:///
					if (stick0.getLeftTrig() < 0 && stick0.getRightTrig() < 0){
						motor4.set(1);
						motor5.set(1);
					}
					else {
						motor4.set(0.00);
						motor5.set(0.00);
					}
						
					/* Notes:
					 * kOff = none activated
					 * kForward/kReverse = one activated
					 */
					
					
				}
			}
	

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
		LiveWindow.run();
	}
	
	public void operatorControl() {
		
		}
			//Timer.delay(k_updatePeriod);	// wait 5ms to the next update
}

